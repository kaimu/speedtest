// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kaimu/speedtest/providers/ookla/adapter (interfaces: OoklaServer)

// Package mock_adapter is a generated GoMock package.
package mock_adapter

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOoklaServer is a mock of OoklaServer interface.
type MockOoklaServer struct {
	ctrl     *gomock.Controller
	recorder *MockOoklaServerMockRecorder
}

// MockOoklaServerMockRecorder is the mock recorder for MockOoklaServer.
type MockOoklaServerMockRecorder struct {
	mock *MockOoklaServer
}

// NewMockOoklaServer creates a new mock instance.
func NewMockOoklaServer(ctrl *gomock.Controller) *MockOoklaServer {
	mock := &MockOoklaServer{ctrl: ctrl}
	mock.recorder = &MockOoklaServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOoklaServer) EXPECT() *MockOoklaServerMockRecorder {
	return m.recorder
}

// DownloadTest mocks base method.
func (m *MockOoklaServer) DownloadTest(arg0 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadTest", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadTest indicates an expected call of DownloadTest.
func (mr *MockOoklaServerMockRecorder) DownloadTest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadTest", reflect.TypeOf((*MockOoklaServer)(nil).DownloadTest), arg0)
}

// Results mocks base method.
func (m *MockOoklaServer) Results() (float64, float64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Results")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	return ret0, ret1
}

// Results indicates an expected call of Results.
func (mr *MockOoklaServerMockRecorder) Results() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Results", reflect.TypeOf((*MockOoklaServer)(nil).Results))
}

// UploadTest mocks base method.
func (m *MockOoklaServer) UploadTest(arg0 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadTest", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadTest indicates an expected call of UploadTest.
func (mr *MockOoklaServerMockRecorder) UploadTest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadTest", reflect.TypeOf((*MockOoklaServer)(nil).UploadTest), arg0)
}

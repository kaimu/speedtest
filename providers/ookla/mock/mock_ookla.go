// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kaimu/speedtest/providers/ookla (interfaces: Ookla)

// Package mock_ookla is a generated GoMock package.
package mock_ookla

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	adapter "github.com/kaimu/speedtest/providers/ookla/adapter"
	speedtest "github.com/showwin/speedtest-go/speedtest"
)

// MockOokla is a mock of Ookla interface.
type MockOokla struct {
	ctrl     *gomock.Controller
	recorder *MockOoklaMockRecorder
}

// MockOoklaMockRecorder is the mock recorder for MockOokla.
type MockOoklaMockRecorder struct {
	mock *MockOokla
}

// NewMockOokla creates a new mock instance.
func NewMockOokla(ctrl *gomock.Controller) *MockOokla {
	mock := &MockOokla{ctrl: ctrl}
	mock.recorder = &MockOoklaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOokla) EXPECT() *MockOoklaMockRecorder {
	return m.recorder
}

// FetchServerList mocks base method.
func (m *MockOokla) FetchServerList(arg0 *speedtest.User) (speedtest.ServerList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchServerList", arg0)
	ret0, _ := ret[0].(speedtest.ServerList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchServerList indicates an expected call of FetchServerList.
func (mr *MockOoklaMockRecorder) FetchServerList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchServerList", reflect.TypeOf((*MockOokla)(nil).FetchServerList), arg0)
}

// FetchUserInfo mocks base method.
func (m *MockOokla) FetchUserInfo() (*speedtest.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserInfo")
	ret0, _ := ret[0].(*speedtest.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserInfo indicates an expected call of FetchUserInfo.
func (mr *MockOoklaMockRecorder) FetchUserInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserInfo", reflect.TypeOf((*MockOokla)(nil).FetchUserInfo))
}

// FindServer mocks base method.
func (m *MockOokla) FindServer(arg0 speedtest.ServerList, arg1 []int) ([]adapter.OoklaServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindServer", arg0, arg1)
	ret0, _ := ret[0].([]adapter.OoklaServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindServer indicates an expected call of FindServer.
func (mr *MockOoklaMockRecorder) FindServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindServer", reflect.TypeOf((*MockOokla)(nil).FindServer), arg0, arg1)
}
